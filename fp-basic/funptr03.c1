//test return 0

/* function pointers passed into higher-order functions */
/* function pointers in contracts */

typedef
bool compfun(int x, int y);

bool le(int x, int y) { return x <= y; }
bool ge(int x, int y) { return x >= y; }
bool le_mod10(int x, int y) { return x%10 <= y%10; }

void swap(int[] A, int i, int j)
//@requires 0 <= i && i <= \length(A);
//@requires 0 <= j && j <= \length(A);
{
  int tmp = A[i];
  A[i] = A[j];
  A[j] = tmp;
}

bool is_sorted(compfun* comp, int[] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
{
  for (int i = lower; i < upper-1; i++)
    //@loop_invariant lower <= i;
    if (!(*comp)(A[i], A[i+1]))
      return false;
  return true;
}

void sort(compfun* comp, int[] A, int n)
//@requires 0 <= n;
//@ensures is_sorted(comp, A, 0, n);
{
  for (int i = 0; i < n; i++)
    //@loop_invariant 0 <= i && i <= n;
    for (int j = i+1; j < n; j++)
      //@loop_invariant 0 <= j && j <= n;
      if (!(*comp)(A[i],A[j]))
        swap(A, i, j);
}

int main() {
  int n = 20;
  int[] A = alloc_array(int, n);
  for (int i = 0; i < n; i++) {
    A[i] = i;
  }
  sort(&ge, A, n);
  assert(is_sorted(&ge, A, 0, n));
  for (int i = 0; i < n; i++)
    assert(A[i] == 19-i);
  sort(&le, A, n);
  assert(is_sorted(&le, A, 0, n));
  sort(&le_mod10, A, n);
  for (int i = 0; i < n; i++) {
    assert(A[i]%10 == i/2);
  }
  return 0;
}
